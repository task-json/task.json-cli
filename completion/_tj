#compdef tj
#
# Copyright (C) 2020-2022 DCsunset
# See full notice in README.md in this project
#

_tj() {
	# zsh internal variables
	local line state

	# set state using ->value
	# 1 used to describe the first arg (tj itself)
	_arguments -C \
		"1: :->cmd" \
		"*::arg:->arg"
	
	case "$state" in
		cmd)
			local commands=(
				"add:add a new task"
				"completion:install completion script"
				"do:mark task(s) as done"
				"due:show most recent due date"
				"erase:erase task(s) permanently"
				"ls:list tasks"
				"lsCtx:list contexts"
				"lsNum:list numbers"
				"lsProj:list projects"
				"modify:modify tasks"
				"restore:undo the last modification"
				"rm:delete task(s)"
				"server:server configuration"
				"show:show task details"
				"undo:undo task(s)"
				"workspace:workspace configuration"
				"help:display help message"
			)

			local comp_commands() {
				_describe "commands" commands
			}

			# complete command first
			_arguments ":: :comp_commands" \
				"(- *)"{-h,--help}"[show CLI help]" \
				"(- *)"{-v,--version}"[show version]"
			;;
		arg)
			local commands=(
				"add"
				"completion"
				"do"
				"due"
				"erase"
				"ls"
				"lsCtx"
				"lsNum"
				"lsProj"
				"modify"
				"restore"
				"rm"
				"server"
				"show"
				"undo"
				"workspace"
			)
			
			# call complete functions if it's a valid command
			if (( $commands[(Ie)$line[1]] )); then
				_tj_$line[1]
			fi
	esac
}

local ls_ctx="tj lsCtx -T todo -T done"
local ls_proj="tj lsProj -T todo -T done"
local task_types=(todo done removed all)

local comp_ctx_filter() {
	compadd $(eval $ls_ctx)
	# add negative representation (! as hidden prefix)
	compadd -p '!' -- $(eval $ls_ctx)
}
local comp_ctx() {
	compadd $(eval $ls_ctx)
}
local comp_proj_filter() {
	compadd $(eval $ls_proj)
	# add negative representation (! as hidden prefix)
	compadd -p '!' -- $(eval $ls_proj)
}
local comp_proj() {
	compadd $(eval $ls_proj)
}
local comp_num() {
	compadd $(tj lsNum $@)
}

_tj_add() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		{-t,--text}"[text]:" \
		{-P,--priority}"[priority (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[projects]: :comp_proj" \
		"*"{-c,--ctx}"[contexts]: :comp_ctx" \
		"*"{-D,--dep}"[dependencies (use #)]: :comp_num -T all" \
		{-w,--wait}"[wait until the specified date]:" \
		{-d,--due}"[due date]:" \
		"--no-workspace[ignore workspace settings temporarily]"
}

_tj_complete() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"--zsh[install zsh completion]" \
		"2:dir:_directories"
}

_tj_do() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num"
}

_tj_due() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"--iso[show due date in ISO format]"
}

_tj_erase()  {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		{-f,--force}"[force erasing without confirmation]" \
		"*:num:comp_num -T removed"
}

_tj_ls() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)" \
		"*"{-P,--prior}"[filter tasks by priorities (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[filter tasks by projects]: :comp_proj_filter" \
		"*"{-c,--ctx}"[filter tasks by contexts]: :comp_ctx_filter" \
		{-w,--wait}"[show waiting tasks]" \
		{-D,--dep}"[show dependent tasks and dependencies]" \
		"--no-workspace[ignore workspace settings temporarily]"
}

_tj_lsNum() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_lsCtx() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_lsProj() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_modify() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)" \
		"*--filter-prior[filter tasks by priorities (A-Z)]: :({A..Z})" \
		"*--filter-proj[filter tasks by projects]: :comp_proj_filter" \
		"*--filter-ctx[filter tasks by contexts]: :comp_ctx_filter" \
		{-t,--text}"[modify text]:" \
		{-P,--prior}"[modify priority (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[modify projects]: :comp_proj" \
		"*"{-c,--ctx}"[modify contexts]: :comp_ctx" \
		"*"{-D,--dep}"[modify dependencies]: :comp_num -T all" \
		{-w,--wait}"[modify wait date]:" \
		{-d,--due}"[modify due date]:" \
		"*:num:comp_num -T all"
}

_tj_restore() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		{-f,--force}"[force overwriting without confirmation]"
}

_tj_rm() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num -T todo -T done"
}

_tj_server() {
	# zsh internal variables
	local line state

	# set state using ->value
	# 1 used to describe the first arg (tj itself)
	_arguments -C \
		"1: :->cmd" \
		"*::arg:->arg"
	
	case "$state" in
		cmd)
			local commands=(
				"show:show server(s)"
				"add:add a new server"
				"modify:modify an existing server"
				"rm:remove an existing server"
				"login:log into the server"
				"sync:sync with server"
			)

			local comp_commands() {
				_describe "commands" commands
			}

			# complete command first
			_arguments ":: :comp_commands" \
				"(- *)"{-h,--help}"[show CLI help]"
			;;
		arg)
			local commands=(
				"show"
				"add"
				"modify"
				"rm"
				"login"
				"sync"
			)
			
			# call complete functions if it's a valid command
			if (( $commands[(Ie)$line[1]] )); then
				_tj_server_$line[1]
			fi
	esac
}

local comp_server() {
	compadd $(tj server show --name)
}

_tj_server_show() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*::name:comp_server" \
		{-t,--token}"[show server token]" \
		{-n,--name}"[only show server names]"
}

_tj_server_add() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		":name:" \
		{-u,--url}"[server URL]:" \
		{-t,--token}"[token to log in]:" \
		{-d,--default}"[set this server as default]"
}

_tj_server_modify() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"::name:comp_server" \
		{-u,--url}"[server URL]:" \
		{-t,--token}"[token to log in]:" \
		{--no-token}"[clear token]" \
		{-d,--default}"[set this server as default]" \
		{--no-default}"[set this server as not default]" \
		{--no-ca}"[clear all trusted CA certs]"
}

_tj_server_rm() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"::name:comp_server"
}

_tj_server_login() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		":name:comp_server" \
		{-p,--password}"[password for login]:"
}

_tj_server_sync() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		":name:comp_server" \
		{-u,--upload}"[upload local task.json to overwrite the one on server]" \
		{-d,--download}"[download task.json from server to overwrite the local one]" \
		{-f,--force}"[overwrite without confirmation]"
}

_tj_show() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"--iso[show date in ISO format]" \
		"*:num:comp_num -T all"
}

_tj_undo() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num -T done -T removed"
}

_tj_workspace() {
	# zsh internal variables
	local line state

	# set state using ->value
	# 1 used to describe the first arg (tj itself)
	_arguments -C \
		"1: :->cmd" \
		"*::arg:->arg"
	
	case "$state" in
		cmd)
			local commands=(
				"show:show workspace(s)"
				"add:add a new workspace"
				"modify:modify an existing workspace"
				"rm:remove an existing workspace"
			)

			local comp_commands() {
				_describe "commands" commands
			}

			# complete command first
			_arguments ":: :comp_commands" \
				"(- *)"{-h,--help}"[show CLI help]"
			;;
		arg)
			local commands=(
				"show"
				"add"
				"modify"
				"rm"
			)
			
			# call complete functions if it's a valid command
			if (( $commands[(Ie)$line[1]] )); then
				_tj_workspace_$line[1]
			fi
	esac
}

local comp_workspace() {
	compadd $(tj workspace show --name)
}

_tj_workspace_show() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"*:name:comp_workspace" \
		{-n,--name}"[only show workspace name]"
}

_tj_workspace_add() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		":name:" \
		{-p,--proj}"[auto filter and set projects for other commands (add, ls) if not specified]:" \
		{-c,--ctx}"[auto filter and set contexts for other commands (add, ls) if not specified]:" \
		{-e,--enabled}"[enable this workspace]"
}

_tj_workspace_modify() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"::name:comp_workspace" \
		{-p,--proj}"[auto filter and set projects for other commands (add, ls) if not specified]:" \
		"--no-proj[clear projects]" \
		{-c,--ctx}"[auto filter and set contexts for other commands (add, ls) if not specified]:" \
		"--no-ctx[clear contexts]" \
		{-e,--enabled}"[enable this workspace]" \
		"--no-enabled[disablethis workspace]"
}

_tj_workspace_rm() {
	_arguments \
		"(- *)"{-h,--help}"[show command help]" \
		"::name:comp_workspace"
}

_tj
