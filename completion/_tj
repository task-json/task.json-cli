#compdef tj
#
# Copyright (C) 2020-2022 DCsunset
# See full notice in README.md in this project
#

_tj() {
	# zsh internal variables
	local line state

	# set state using ->value
	# 1 used to describe the first arg (tj itself)
	_arguments -C \
		"1: :->cmd" \
		"*::arg:->arg"
	
	case "$state" in
		cmd)
			local commands=(
				"add:add a new task"
				"completion:install completion script"
				"do:mark task(s) as done"
				"due:show most recent due date"
				"erase:erase task(s) permanently"
				"ls:list tasks"
				"lsCtx:list contexts"
				"lsNum:list numbers"
				"lsProj:list projects"
				"modify:modify tasks"
				"restore:undo the last modification"
				"rm:delete task(s)"
				"server:server configuration"
				"show:show task details"
				"undo:undo task(s)"
				"workspace:workspace configuration"
				"help:display help message"
			)

			local comp_commands() {
				_describe "commands" commands
			}

			# complete command first
			_arguments ":: :comp_commands" \
				"(- *)"{-h,--help}"[show CLI help]" \
				"(- *)"{-v,--version}"[show version]"
			;;
		arg)
			local commands=(
				"add"
				"completion"
				"do"
				"due"
				"erase"
				"ls"
				"lsCtx"
				"lsNum"
				"lsProj"
				"modify"
				"restore"
				"rm"
				"server"
				"show"
				"undo"
				"workspace"
				"help"
			)
			
			# call complete functions if it's a valid command
			if (( $commands[(Ie)$line[1]] )); then
				_tj_$line[1]
			fi
	esac
	set_flags() {
		case $command_name in
			# TODO
			login)
				command_flags=(
					"(- *)"{-h,--help}"[show command help]"
					"(-p --password)"{-p,--password}"[log in with password]:"
				)
			;;
			sync)
				command_flags=(
					"(- *)"{-h,--help}"[show command help]"
					"(-u --upload)"{-u,--upload}"[upload local task.json to overwrite the one on server]"
					"(-d --download)"{-d,--download}"[download task.json from server to overwrite the local one]"
					"(-f --force)"{-f,--force}"[overwrite without confirmation]"
				)
			;;
			config)
				command_flags=(
					"(- *)"{-h,--help}"[show command help]"
					"(-s --server)"{-s,--server}"[set server address]:"
					"(-t --token)"{-t,--token}"[set token for login]:"
					"(-r --reset)"{-r,--reset}"[reset all configurations]: :(server token all)"
				)
			;;
			workspace)
				command_flags=(
					"(- *)"{-h,--help}"[show command help]"
					"*"{-p,--projects}"[one or more projects]: :comp_proj_filter"
					"*"{-c,--contexts}"[one or more contexts]: :comp_ctx_filter"
					"--and-projects[filter projects using AND operator instead of OR]"
					"--and-contexts[filter contexts using AND operator instead of OR]"
					"(-r --reset)"{-r,--reset}"[reset workspace (to empty)]: :(projects contexts all and-projects and-contexts)"
				)
			;;
		esac
	}
}

local ls_ctx="tj lsCtx -T todo -T done"
local ls_proj="tj lsProj -T todo -T done"
local task_types=(todo done removed all)

local comp_ctx_filter() {
	compadd $(eval $ls_ctx)
	# add negative representation (! as hidden prefix)
	compadd -p '!' -- $(eval $ls_ctx)
}
local comp_ctx() {
	compadd $(eval $ls_ctx)
}
local comp_proj_filter() {
	compadd $(eval $ls_proj)
	# add negative representation (! as hidden prefix)
	compadd -p '!' -- $(eval $ls_proj)
}
local comp_proj() {
	compadd $(eval $ls_proj)
}
local comp_num() {
	compadd $(tj lsNum $@)
}

_tj_add() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		{-t,--text}"[text]:" \
		{-P,--priority}"[priority (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[projects]: :comp_proj" \
		"*"{-c,--ctx}"[contexts]: :comp_ctx" \
		"*"{-D,--dep}"[dependencies (use #)]: :comp_num -T all" \
		{-w,--wait}"[wait until the specified date]:" \
		{-d,--due}"[due date]:" \
		"--no-workspace[ignore workspace settings temporarily]"
}

_tj_complete() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"--zsh[install zsh completion]" \
		"2:dir:_directories"
}

_tj_do() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num"
}

_tj_due() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"--iso[show due date in ISO format]"
}

_tj_erase()  {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		{-f,--force}"[force erasing without confirmation]" \
		"*:num:comp_num -T removed"
}

_tj_ls() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)" \
		"*"{-P,--prior}"[filter tasks by priorities (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[filter tasks by projects]: :comp_proj_filter" \
		"*"{-c,--ctx}"[filter tasks by contexts]: :comp_ctx_filter" \
		{-w,--wait}"[show waiting tasks]" \
		{-D,--dep}"[show dependent tasks and dependencies]" \
		"--no-workspace[ignore workspace settings temporarily]"
}

_tj_lsNum() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]"
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_lsCtx() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_lsProj() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
}

_tj_modify() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)" \
		"*--filter-prior[filter tasks by priorities (A-Z)]: :({A..Z})" \
		"*--filter-proj[filter tasks by projects]: :comp_proj_filter" \
		"*--filter-ctx[filter tasks by contexts]: :comp_ctx_filter" \
		{-t,--text}"[modify text]:" \
		{-P,--prior}"[modify priority (A-Z)]: :({A..Z})" \
		"*"{-p,--proj}"[modify projects]: :comp_proj" \
		"*"{-c,--ctx}"[modify contexts]: :comp_ctx" \
		"*"{-D,--dep}"[modify dependencies]: :comp_num -T all" \
		{-w,--wait}"[modify wait date]:" \
		{-d,--due}"[modify due date]:" \
		"*:num:comp_num -T all"
}

_tj_restore() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		{-f,--force}"[force overwriting without confirmation]"
}

_tj_rm() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num -T todo -T done"
}

_tj_show() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"--iso[show date in ISO format]" \
		"*:num:comp_num -T all"
}

_tj_undo() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]" \
		"*:num:comp_num -T done -T removed"
}

_tj_workspace() {
	_arguments -s \
		"(- *)"{-h,--help}"[show command help]"
}

_tj
