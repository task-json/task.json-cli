#compdef tj

_tj() {
	local -a commands=(
		"add:add a new task"
		"config:modify or show config"
		"do:mark tasks as done"
    "erase:erase removed tasks"
    "login:login into the server"
		"ls:list tasks"
		"lsnum:list numbers"
		"lsctx:list contexts"
		"lsproj:list projects"
		"modify:modify tasks"
		"restore:undo the last modification using the bak file"
		"rm:delete tasks"
    "sync:sync local task.json with server"
		"undo:undo tasks"
		"autocomplete:install completion scripts"
		"help:display help message"
  )
  describe_commands() {
    _describe "commands" commands
  }

  complete_contexts() {
    compadd $(tj lsctx -a)
  }
  complete_projects() {
    compadd $(tj lsproj -a)
  }

  local lsnum_flag=""
  local done_pattern="(-D)|(--done)"
  local removed_pattern="(-R)|(--removed)"

  # check if done flag is set
  if (($words[(I)$done_pattern])); then
    lsnum_flag="-D"
  fi
  # check if removed flag is set
  if (($words[(I)$removed_pattern])); then
    lsnum_flag="-R"
  fi

  local command_name=${words[2]}
  local -a command_flags=(
    "(- *)"{-h,--help}"[show CLI help]"
    "(- *)"{-v,--version}"[show version]"
  )
  set_flags() {
    case $command_name in
      add)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-P --priority)"{-P,--priority}"[priority (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[one or more projects]: :complete_projects"
          "*"{-c,--contexts}"[one or more contexts]: :complete_contexts"
          "(-d --due)"{-d,--due}"[due date]:"
        )
      ;;
      do)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*:num:($(tj lsnum))"
        )
      ;;
      undo)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-r --removed)"{-r,--removed}"[restore removed tasks]"
          "*:num:($(tj lsnum -D))"
        )
      ;;
      rm)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-D --done)"{-D,--done}"[delete done tasks]"
          "*:num:($(tj lsnum $lsnum_flag))"
        )
      ;;
      erase)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-f --force)"{-f,--force}"[force overwriting without confirmation]"
          "*:num:($(tj lsnum -R))"
        )
      ;;
      restore)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-f --force)"{-f,--force}"[force overwriting without confirmation]"
        )
      ;;
      login)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-p --password)"{-p,--password}"[log in with password]:"
        )
      ;;
      sync)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-u --upload)"{-u,--upload}"[upload local task.json to overwrite the one on server]"
          "(-d --download)"{-d,--download}"[download task.json from server to overwrite the local one]"
          "(-f --force)"{-f,--force}"[overwrite without confirmation]"
        )
      ;;
      config)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-s --server)"{-s,--server}"[set server address]:"
          "(-t --token)"{-t,--token}"[set token for login]:"
          "(-r --reset)"{-r,--reset}"[reset all configurations]"
        )
      ;;
      ls)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-D --done)"{-D,--done}"[list only done tasks]"
          "(-R --removed)"{-R,--removed}"[list only removed tasks]"
          "*"{-P,--priorities}"[filter tasks by priorities (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[filter tasks by specific projects]: :complete_projects"
          "*"{-c,--contexts}"[filter tasks by specific contexts]: :complete_contexts"
          "--and-projects[filter projects using AND operator instead of OR]"
          "--and-contexts[filter contexts using AND operator instead of OR]"
        )
      ;;
      lsnum)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-D --done)"{-D,--done}"[list numbers of only done tasks]"
          "(-R --removed)"{-R,--removed}"[list numbers of only removed tasks]"
        )
      ;;
      lsctx)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-a --all)"{-a,--all}"[list contexts of all tasks including done ones]"
          "(-D --done)"{-D,--done}"[list contexts of only done tasks]"
        )
      ;;
      lsproj)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-a --all)"{-a,--all}"[list projects of all tasks including done ones]"
          "(-D --done)"{-D,--done}"[list projects of only done tasks]"
        )
      ;;
      modify)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-D --done)"{-D,--done}"[modify done tasks]"
          "*--filter-priorities[filter tasks by priorities (A-Z)]: :({A..Z})"
          "*--filter-projects[filter tasks by specific projects]: :complete_projects"
          "*--filter-contexts[filter tasks by specific contexts]: :complete_contexts"
          "--and-projects[filter projects using AND operator instead of OR]"
          "--and-contexts[filter contexts using AND operator instead of OR]"

          "(-t --text)"{-t,--text}"[modify text]:"
          "(-P --priority)"{-P,--priority}"[modify priority (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[modify projects (overwrite all)]: :complete_projects"
          "*"{-c,--contexts}"[modify contexts (overwrite all)]: :complete_contexts"
          "(-d --due)"{-d,--due}"[modify due date]:"
          "*:num:($(tj lsnum $lsnum_flag))"
        )
      ;;
      autocomplete)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "--zsh[install zsh completion scripts]"
          "2:dir:_files -/"
        )
      ;;
    esac
  }
  if [ $CURRENT -gt 2 ]; then
    set_flags
  fi

  _arguments "1: :describe_commands" $command_flags
}

_tj
