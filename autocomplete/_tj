#compdef tj

_tj() {
	local -a commands=(
		"add:add a new task"
		"config:modify or show config"
		"do:mark tasks as done"
    "erase:erase removed tasks"
    "login:login into the server"
    "detail:show task details"
		"ls:list tasks"
		"lsnum:list numbers"
		"lsctx:list contexts"
		"lsproj:list projects"
		"modify:modify tasks"
		"restore:undo the last modification using the bak file"
		"rm:delete tasks"
    "sync:sync local task.json with server"
		"undo:undo tasks"
		"autocomplete:install completion scripts"
    "workspace:set workspace"
    "due:show most recent due date"
		"help:display help message"
  )
  describe_commands() {
    _describe "commands" commands
  }

  local ls_contexts="tj lsctx -T todo -T done"
  local ls_projects="tj lsproj -T todo -T done"

  complete_filter_contexts() {
    compadd $(eval $ls_contexts)
    # add negative representation (! as hidden prefix)
    compadd -p '!' -- $(eval $ls_contexts)
  }
  complete_contexts() {
    compadd $(eval $ls_contexts)
  }
  complete_filter_projects() {
    compadd $(eval $ls_projects)
    # add negative representation (! as hidden prefix)
    compadd -p '!' -- $(eval $ls_projects)
  }
  complete_projects() {
    compadd $(eval $ls_projects)
  }
  complete_numbers() {
    compadd $(tj lsnum -T all)
  }

  local task_types=(todo done removed all)
  local command_name=${words[2]}
  local -a command_flags=(
    "(- *)"{-h,--help}"[show CLI help]"
    "(- *)"{-v,--version}"[show version]"
  )
  set_flags() {
    case $command_name in
      add)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-P --priority)"{-P,--priority}"[priority (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[one or more projects]: :complete_projects"
          "*"{-c,--contexts}"[one or more contexts]: :complete_contexts"
          "*"{-D,--deps}"[dependencies (use #)]: :complete_numbers"
          "(-w --wait)"{-w,--wait}"[wait until date]:"
          "(-d --due)"{-d,--due}"[due date]:"
          "--no-workspace[ignore workspace settings temporarily]"
        )
      ;;
      do)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*:num:($(tj lsnum))"
        )
      ;;
      undo)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-r --removed)"{-r,--removed}"[restore removed tasks]"
          "*:num:($(tj lsnum -T done -T removed))"
        )
      ;;
      rm)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-D --done)"{-D,--done}"[delete done tasks]"
          "*:num:($(tj lsnum -T todo -T done))"
        )
      ;;
      erase)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-f --force)"{-f,--force}"[force overwriting without confirmation]"
          "*:num:($(tj lsnum -T removed))"
        )
      ;;
      restore)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-f --force)"{-f,--force}"[force overwriting without confirmation]"
        )
      ;;
      login)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-p --password)"{-p,--password}"[log in with password]:"
        )
      ;;
      sync)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-u --upload)"{-u,--upload}"[upload local task.json to overwrite the one on server]"
          "(-d --download)"{-d,--download}"[download task.json from server to overwrite the local one]"
          "(-f --force)"{-f,--force}"[overwrite without confirmation]"
        )
      ;;
      config)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "(-s --server)"{-s,--server}"[set server address]:"
          "(-t --token)"{-t,--token}"[set token for login]:"
          "(-r --reset)"{-r,--reset}"[reset all configurations]: :(server token all)"
        )
      ;;
      detail)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*:num:complete_numbers"
        )
      ;;
      ls)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
          "(-w --wait)"{-w,--wait}"[show dependent tasks and dependencies]"
          "(-D --deps)"{-D,--deps}"[show dependent tasks and dependencies]"
          "*"{-P,--priorities}"[filter tasks by priorities (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[filter tasks by specific projects]: :complete_filter_projects"
          "*"{-c,--contexts}"[filter tasks by specific contexts]: :complete_filter_contexts"
          "--and-projects[filter projects using AND operator instead of OR]"
          "--and-contexts[filter contexts using AND operator instead of OR]"
          "--no-workspace[ignore workspace settings temporarily]"
        )
      ;;
      lsnum)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-T,--types}"[list numbers of tasks of types (todo, done, removed, all)]: :($task_types)"
        )
      ;;
      lsctx)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-T,--types}"[list contexts of tasks of types (todo, done, removed, all)]: :($task_types)"
        )
      ;;
      lsproj)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-T,--types}"[list projects of tasks of types (todo, done, removed, all)]: :($task_types)"
        )
      ;;
      modify)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-T,--types}"[filter tasks by types (todo, done, removed, all)]: :($task_types)"
          "*--filter-priorities[filter tasks by priorities (A-Z)]: :({A..Z})"
          "*--filter-projects[filter tasks by specific projects]: :complete_filter_projects"
          "*--filter-contexts[filter tasks by specific contexts]: :complete_filter_contexts"
          "--and-projects[filter projects using AND operator instead of OR]"
          "--and-contexts[filter contexts using AND operator instead of OR]"

          "(-t --text)"{-t,--text}"[modify text]:"
          "(-P --priority)"{-P,--priority}"[modify priority (A-Z)]: :({A..Z})"
          "*"{-p,--projects}"[modify projects (overwrite all)]: :complete_projects"
          "*"{-c,--contexts}"[modify contexts (overwrite all)]: :complete_contexts"
          "*"{-D,--deps}"[modify dependencies (overwrite all)]: :complete_numbers"
          "(-w --wait)"{-w,--wait}"[modify wait date]:"
          "(-d --due)"{-d,--due}"[modify due date]:"
          "*:num:complete_numbers"
        )
      ;;
      autocomplete)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "--zsh[install zsh completion scripts]"
          "2:dir:_files -/"
        )
      ;;
      workspace)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "*"{-p,--projects}"[one or more projects]: :complete_filter_projects"
          "*"{-c,--contexts}"[one or more contexts]: :complete_filter_contexts"
          "(-r --reset)"{-r,--reset}"[reset workspace (to empty)]: :(projects contexts all)"
        )
      ;;
      due)
        command_flags=(
          "(- *)"{-h,--help}"[show command help]"
          "--iso[show most recent due date in ISO format]"
        )
      ;;
    esac
  }
  if [ $CURRENT -gt 2 ]; then
    set_flags
  fi

  _arguments "1: :describe_commands" $command_flags
}

_tj
